(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{306:function(a,t,e){"use strict";e.r(t);var v=e(14),s=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java面试题"}},[a._v("#")]),a._v(" Java面试题")]),a._v(" "),t("h2",{attrs:{id:"java基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java基础"}},[a._v("#")]),a._v(" Java基础")]),a._v(" "),t("h3",{attrs:{id:"java八大基础类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java八大基础类型"}},[a._v("#")]),a._v(" Java八大基础类型")]),a._v(" "),t("ul",[t("li",[a._v("数字型：字节类型(byte)、短整型(short)、长整型(long)、整型(int)、单精度浮点数(float)、双精度浮点数(double)")]),a._v(" "),t("li",[a._v("字符型：字符类型(varchar)")]),a._v(" "),t("li",[a._v("布尔型：布尔类型(boolean)")])]),a._v(" "),t("h3",{attrs:{id:"java三大特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java三大特性"}},[a._v("#")]),a._v(" Java三大特性")]),a._v(" "),t("ul",[t("li",[a._v("封装：使用private关键字，让对象私有，防止无关的程序去访问使用。")]),a._v(" "),t("li",[a._v("继承：继承某个类，使子类可以使用父类的属性或方法。")]),a._v(" "),t("li",[a._v("多态：同一个行为，不同的子类具有不同的表现形式。")])]),a._v(" "),t("h3",{attrs:{id:"重载和重写的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[a._v("#")]),a._v(" 重载和重写的区别")]),a._v(" "),t("ul",[t("li",[a._v("重载：发生在同一个类中，函数名必须一样，参数类型，参数个数，参数顺序，返回值类型，修饰符可以不一样。")]),a._v(" "),t("li",[a._v("重写：发生在父子类，函数名、参数、返回值必须一样，访问修饰符必须大于等于父类，异常要小于等于父类，父类方法是private不能重写。")])]),a._v(" "),t("h3",{attrs:{id:"public、protected、-default-不写、private修饰符的作用范围"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#public、protected、-default-不写、private修饰符的作用范围"}},[a._v("#")]),a._v(" public、protected、（default）不写、private修饰符的作用范围")]),a._v(" "),t("ul",[t("li",[a._v("public：同类、同包子类、非同包子类、非同包类都可以使用。")]),a._v(" "),t("li",[a._v("protected：同类、同包子类、非同包子类都可以使用，非同包类不能。")]),a._v(" "),t("li",[a._v("(default)不写：同类、同包子类都可以使用，非同包子类、非同包类不能。")]),a._v(" "),t("li",[a._v("private：只有同类可以。")])]),a._v(" "),t("h3",{attrs:{id:"和equals的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和equals的区别"}},[a._v("#")]),a._v(" ==和equals的区别")]),a._v(" "),t("ul",[t("li",[a._v("==：基础类型比较的是值，引用类型比较的是地址。")]),a._v(" "),t("li",[a._v("equals：没有重写比较的是地址是否相等，重写比较的是内容是否相等。")])]),a._v(" "),t("h3",{attrs:{id:"hashcode-值相同-equals就一定为true"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-值相同-equals就一定为true"}},[a._v("#")]),a._v(" hashcode()值相同，equals就一定为true？")]),a._v(" "),t("p",[a._v("不一定，重写hashcode或者属性相同都有可能导致hashcode值相等，但equals确实是false；\n即使两个对象的hashcode值不相等，它们的内容也可能相同，这个对重写过的equals()来说就为true；\n但是equals()为值，那么hashcode()就一定相同。")])])}),[],!1,null,null,null);t.default=s.exports}}]);